_ZN10calculator4evalIiEET_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  438|    553|{
  439|    553|  ExpressionParser<T> parser;
  440|    553|  return parser.eval(expression);
  441|    553|}
_ZN10calculator16ExpressionParserIiE4evalERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  102|    553|  {
  103|    553|    T result = 0;
  104|    553|    index_ = 0;
  105|    553|    expr_ = expr;
  106|    553|    try
  107|    553|    {
  108|    553|      result = parseExpr();
  109|    553|      if (!isEnd())
  ------------------
  |  Branch (109:11): [True: 52, False: 501]
  ------------------
  110|     52|        unexpected();
  111|    553|    }
  112|    553|    catch (const calculator::error&)
  113|    553|    {
  114|  80.0k|      while(!stack_.empty())
  ------------------
  |  Branch (114:13): [True: 79.7k, False: 364]
  ------------------
  115|  79.7k|        stack_.pop();
  116|    364|      throw;
  117|    364|    }
  118|    189|    return result;
  119|    553|  }
_ZN10calculator16ExpressionParserIiE9parseExprEv:
  403|  79.5k|  {
  404|  79.5k|    stack_.push(OperatorValue(Operator(OPERATOR_NULL, 0, 'L'), 0));
  405|       |    // first parse value on the left
  406|  79.5k|    T value = parseValue();
  407|       |
  408|  92.2k|    while (!stack_.empty())
  ------------------
  |  Branch (408:12): [True: 13.1k, False: 79.1k]
  ------------------
  409|  13.1k|    {
  410|       |      // parse an operator (+, -, *, ...)
  411|  13.1k|      Operator op(parseOp());
  412|  25.2k|      while (op.precedence  < stack_.top().getPrecedence() || (
  ------------------
  |  Branch (412:14): [True: 5.05k, False: 20.1k]
  ------------------
  413|  20.1k|             op.precedence == stack_.top().getPrecedence() &&
  ------------------
  |  Branch (413:14): [True: 8.97k, False: 11.2k]
  ------------------
  414|  20.1k|             op.associativity == 'L'))
  ------------------
  |  Branch (414:14): [True: 7.53k, False: 1.43k]
  ------------------
  415|  12.5k|      {
  416|       |        // end reached
  417|  12.5k|        if (stack_.top().isNull())
  ------------------
  |  Branch (417:13): [True: 417, False: 12.1k]
  ------------------
  418|    417|        {
  419|    417|          stack_.pop();
  420|    417|          return value;
  421|    417|        }
  422|       |        // do the calculation ("reduce"), producing a new value
  423|  12.1k|        value = calculate(stack_.top().value, value, stack_.top().op);
  424|  12.1k|        stack_.pop();
  425|  12.1k|      }
  426|       |
  427|       |      // store on stack_ and continue parsing ("shift")
  428|  12.6k|      stack_.push(OperatorValue(op, value));
  429|       |      // parse value on the right
  430|  12.6k|      value = parseValue();
  431|  12.6k|    }
  432|  79.1k|    return 0;
  433|  79.5k|  }
_ZN10calculator16ExpressionParserIiE8OperatorC2Eiii:
  157|  92.6k|    { }
_ZN10calculator16ExpressionParserIiE13OperatorValueC2ERKNS1_8OperatorEi:
  167|  92.2k|    { }
_ZN10calculator16ExpressionParserIiE10parseValueEv:
  363|  96.3k|  {
  364|  96.3k|    T val = 0;
  365|  96.3k|    eatSpaces();
  366|  96.3k|    switch (getCharacter())
  367|  96.3k|    {
  368|  4.36k|      case '0': if (isHex())
  ------------------
  |  Branch (368:7): [True: 4.36k, False: 92.0k]
  |  Branch (368:21): [True: 921, False: 3.44k]
  ------------------
  369|    921|                  val = parseHex();
  370|  3.44k|                else
  371|  3.44k|                  val = parseDecimal();
  372|  4.36k|                break;
  373|  5.52k|      case '1': case '2': case '3': case '4': case '5':
  ------------------
  |  Branch (373:7): [True: 2.09k, False: 94.2k]
  |  Branch (373:17): [True: 1.32k, False: 95.0k]
  |  Branch (373:27): [True: 257, False: 96.1k]
  |  Branch (373:37): [True: 1.16k, False: 95.2k]
  |  Branch (373:47): [True: 693, False: 95.6k]
  ------------------
  374|  8.59k|      case '6': case '7': case '8': case '9':
  ------------------
  |  Branch (374:7): [True: 1.18k, False: 95.1k]
  |  Branch (374:17): [True: 623, False: 95.7k]
  |  Branch (374:27): [True: 830, False: 95.5k]
  |  Branch (374:37): [True: 437, False: 95.9k]
  ------------------
  375|  8.59k|                val = parseDecimal();
  376|  8.59k|                break;
  377|  79.0k|      case '(': index_++;
  ------------------
  |  Branch (377:7): [True: 79.0k, False: 17.3k]
  ------------------
  378|  79.0k|                val = parseExpr();
  379|  79.0k|                eatSpaces();
  380|  79.0k|                if (getCharacter() != ')')
  ------------------
  |  Branch (380:21): [True: 36, False: 79.0k]
  ------------------
  381|     36|                {
  382|     36|                  if (!isEnd())
  ------------------
  |  Branch (382:23): [True: 22, False: 14]
  ------------------
  383|     22|                    unexpected();
  384|     36|                  throw calculator::error(expr_, "Syntax error: `)' expected at end of expression");
  385|     36|                }
  386|  79.0k|                index_++; break;
  387|    449|      case '~': index_++; val = ~parseValue(); break;
  ------------------
  |  Branch (387:7): [True: 449, False: 95.9k]
  ------------------
  388|  1.60k|      case '+': index_++; val =  parseValue(); break;
  ------------------
  |  Branch (388:7): [True: 1.60k, False: 94.7k]
  ------------------
  389|  2.06k|      case '-': index_++; val =  parseValue() * static_cast<T>(-1);
  ------------------
  |  Branch (389:7): [True: 2.06k, False: 94.3k]
  ------------------
  390|  2.06k|                break;
  391|    247|      default : if (!isEnd())
  ------------------
  |  Branch (391:7): [True: 247, False: 96.1k]
  |  Branch (391:21): [True: 99, False: 148]
  ------------------
  392|     99|                  unexpected();
  393|    247|                throw calculator::error(expr_, "Syntax error: value expected at end of expression");
  394|  96.3k|    }
  395|  16.5k|    return val;
  396|  96.3k|  }
_ZN10calculator16ExpressionParserIiE9eatSpacesEv:
  285|   109k|  {
  286|   110k|    while (std::isspace(getCharacter()) != 0)
  ------------------
  |  Branch (286:12): [True: 934, False: 109k]
  ------------------
  287|    934|      index_++;
  288|   109k|  }
_ZNK10calculator16ExpressionParserIiE12getCharacterEv:
  255|   268k|  {
  256|   268k|    if (!isEnd())
  ------------------
  |  Branch (256:9): [True: 267k, False: 940]
  ------------------
  257|   267k|      return expr_[index_];
  258|    940|    return 0;
  259|   268k|  }
_ZNK10calculator16ExpressionParserIiE5isHexEv:
  348|  4.36k|  {
  349|  4.36k|    if (index_ + 2 < expr_.size())
  ------------------
  |  Branch (349:9): [True: 4.30k, False: 60]
  ------------------
  350|  4.30k|    {
  351|  4.30k|      char x = expr_[index_ + 1];
  352|  4.30k|      char h = expr_[index_ + 2];
  353|  4.30k|      return (std::tolower(x) == 'x' && toInteger(h) <= 0xf);
  ------------------
  |  Branch (353:15): [True: 923, False: 3.38k]
  |  Branch (353:41): [True: 921, False: 2]
  ------------------
  354|  4.30k|    }
  355|     60|    return false;
  356|  4.36k|  }
_ZN10calculator16ExpressionParserIiE9toIntegerEc:
  317|  47.7k|  {
  318|  47.7k|    if (c >= '0' && c <= '9') return c -'0';
  ------------------
  |  Branch (318:9): [True: 40.7k, False: 7.01k]
  |  Branch (318:21): [True: 32.4k, False: 8.29k]
  ------------------
  319|  15.3k|    if (c >= 'a' && c <= 'f') return c -'a' + 0xa;
  ------------------
  |  Branch (319:9): [True: 4.26k, False: 11.0k]
  |  Branch (319:21): [True: 2.12k, False: 2.14k]
  ------------------
  320|  13.1k|    if (c >= 'A' && c <= 'F') return c -'A' + 0xa;
  ------------------
  |  Branch (320:9): [True: 5.03k, False: 8.15k]
  |  Branch (320:21): [True: 2.50k, False: 2.52k]
  ------------------
  321|  10.6k|    T noDigit = 0xf + 1;
  322|  10.6k|    return noDigit;
  323|  13.1k|  }
_ZN10calculator16ExpressionParserIiE8parseHexEv:
  339|    921|  {
  340|    921|    index_ = index_ + 2;
  341|    921|    T value = 0;
  342|  4.28k|    for (T h; (h = getInteger()) <= 0xf; index_++)
  ------------------
  |  Branch (342:15): [True: 3.36k, False: 921]
  ------------------
  343|  3.36k|      value = value * 0x10 + h;
  344|    921|    return value;
  345|    921|  }
_ZNK10calculator16ExpressionParserIiE10getIntegerEv:
  326|  46.7k|  {
  327|  46.7k|    return toInteger(getCharacter());
  328|  46.7k|  }
_ZN10calculator16ExpressionParserIiE12parseDecimalEv:
  331|  12.0k|  {
  332|  12.0k|    T value = 0;
  333|  42.5k|    for (T d; (d = getInteger()) <= 9; index_++)
  ------------------
  |  Branch (333:15): [True: 30.4k, False: 12.0k]
  ------------------
  334|  30.4k|      value = value * 10 + d;
  335|  12.0k|    return value;
  336|  12.0k|  }
_ZN10calculator5errorC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_:
   82|    364|  { }
_ZN10calculator16ExpressionParserIiE7parseOpEv:
  294|  13.1k|  {
  295|  13.1k|    eatSpaces();
  296|  13.1k|    switch (getCharacter())
  297|  13.1k|    {
  298|  2.13k|      case '|': index_++;     return Operator(OPERATOR_BITWISE_OR,      4, 'L');
  ------------------
  |  Branch (298:7): [True: 2.13k, False: 10.9k]
  ------------------
  299|    367|      case '^': index_++;     return Operator(OPERATOR_BITWISE_XOR,     5, 'L');
  ------------------
  |  Branch (299:7): [True: 367, False: 12.7k]
  ------------------
  300|    901|      case '&': index_++;     return Operator(OPERATOR_BITWISE_AND,     6, 'L');
  ------------------
  |  Branch (300:7): [True: 901, False: 12.2k]
  ------------------
  301|    556|      case '<': expect("<<"); return Operator(OPERATOR_BITWISE_SHL,     9, 'L');
  ------------------
  |  Branch (301:7): [True: 556, False: 12.5k]
  ------------------
  302|    592|      case '>': expect(">>"); return Operator(OPERATOR_BITWISE_SHR,     9, 'L');
  ------------------
  |  Branch (302:7): [True: 592, False: 12.5k]
  ------------------
  303|    762|      case '+': index_++;     return Operator(OPERATOR_ADDITION,       10, 'L');
  ------------------
  |  Branch (303:7): [True: 762, False: 12.3k]
  ------------------
  304|  1.21k|      case '-': index_++;     return Operator(OPERATOR_SUBTRACTION,    10, 'L');
  ------------------
  |  Branch (304:7): [True: 1.21k, False: 11.8k]
  ------------------
  305|  1.90k|      case '/': index_++;     return Operator(OPERATOR_DIVISION,       20, 'L');
  ------------------
  |  Branch (305:7): [True: 1.90k, False: 11.2k]
  ------------------
  306|    615|      case '%': index_++;     return Operator(OPERATOR_MODULO,         20, 'L');
  ------------------
  |  Branch (306:7): [True: 615, False: 12.4k]
  ------------------
  307|  1.34k|      case '*': index_++; if (getCharacter() != '*')
  ------------------
  |  Branch (307:7): [True: 1.34k, False: 11.7k]
  |  Branch (307:31): [True: 827, False: 518]
  ------------------
  308|    827|                              return Operator(OPERATOR_MULTIPLICATION, 20, 'L');
  309|    518|                index_++;     return Operator(OPERATOR_POWER,          30, 'R');
  310|  1.34k|      case 'e': index_++;     return Operator(OPERATOR_EXPONENT,       40, 'R');
  ------------------
  |  Branch (310:7): [True: 1.34k, False: 11.7k]
  ------------------
  311|    945|      case 'E': index_++;     return Operator(OPERATOR_EXPONENT,       40, 'R');
  ------------------
  |  Branch (311:7): [True: 945, False: 12.1k]
  ------------------
  312|    430|      default :               return Operator(OPERATOR_NULL,            0, 'L');
  ------------------
  |  Branch (312:7): [True: 430, False: 12.6k]
  ------------------
  313|  13.1k|    }
  314|  13.1k|  }
_ZN10calculator16ExpressionParserIiE6expectERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  265|  1.14k|  {
  266|  1.14k|    if (expr_.compare(index_, str.size(), str) != 0)
  ------------------
  |  Branch (266:9): [True: 11, False: 1.13k]
  ------------------
  267|     11|      unexpected();
  268|  1.14k|    index_ += str.size();
  269|  1.14k|  }
_ZNK10calculator16ExpressionParserIiE13OperatorValue13getPrecedenceEv:
  169|  45.4k|    {
  170|  45.4k|      return op.precedence;
  171|  45.4k|    }
_ZNK10calculator16ExpressionParserIiE13OperatorValue6isNullEv:
  173|  12.5k|    {
  174|  12.5k|      return op.op == OPERATOR_NULL;
  175|  12.5k|    }
_ZNK10calculator16ExpressionParserIiE9calculateEiiRKNS1_8OperatorE:
  227|  12.1k|  {
  228|  12.1k|    switch (op.op)
  229|  12.1k|    {
  230|  1.92k|      case OPERATOR_BITWISE_OR:     return v1 | v2;
  ------------------
  |  Branch (230:7): [True: 1.92k, False: 10.2k]
  ------------------
  231|    358|      case OPERATOR_BITWISE_XOR:    return v1 ^ v2;
  ------------------
  |  Branch (231:7): [True: 358, False: 11.7k]
  ------------------
  232|    878|      case OPERATOR_BITWISE_AND:    return v1 & v2;
  ------------------
  |  Branch (232:7): [True: 878, False: 11.2k]
  ------------------
  233|    542|      case OPERATOR_BITWISE_SHL:    return v1 << v2;
  ------------------
  |  Branch (233:7): [True: 542, False: 11.6k]
  ------------------
  234|    581|      case OPERATOR_BITWISE_SHR:    return v1 >> v2;
  ------------------
  |  Branch (234:7): [True: 581, False: 11.5k]
  ------------------
  235|    740|      case OPERATOR_ADDITION:       return v1 + v2;
  ------------------
  |  Branch (235:7): [True: 740, False: 11.4k]
  ------------------
  236|  1.19k|      case OPERATOR_SUBTRACTION:    return v1 - v2;
  ------------------
  |  Branch (236:7): [True: 1.19k, False: 10.9k]
  ------------------
  237|    814|      case OPERATOR_MULTIPLICATION: return v1 * v2;
  ------------------
  |  Branch (237:7): [True: 814, False: 11.3k]
  ------------------
  238|  1.87k|      case OPERATOR_DIVISION:       return v1 / checkZero(v2);
  ------------------
  |  Branch (238:7): [True: 1.87k, False: 10.2k]
  ------------------
  239|    606|      case OPERATOR_MODULO:         return v1 % checkZero(v2);
  ------------------
  |  Branch (239:7): [True: 606, False: 11.5k]
  ------------------
  240|    475|      case OPERATOR_POWER:          return pow(v1, v2);
  ------------------
  |  Branch (240:7): [True: 475, False: 11.6k]
  ------------------
  241|  2.16k|      case OPERATOR_EXPONENT:       return v1 * pow(10, v2);
  ------------------
  |  Branch (241:7): [True: 2.16k, False: 9.97k]
  ------------------
  242|      0|      default:                      return 0;
  ------------------
  |  Branch (242:7): [True: 0, False: 12.1k]
  ------------------
  243|  12.1k|    }
  244|  12.1k|  }
_ZNK10calculator16ExpressionParserIiE9checkZeroEi:
  210|  2.47k|  {
  211|  2.47k|    if (value == 0)
  ------------------
  |  Branch (211:9): [True: 18, False: 2.45k]
  ------------------
  212|     18|    {
  213|     18|      std::string divOperators("/%");
  214|     18|      std::size_t division = expr_.find_last_of(divOperators, index_ - 2);
  215|     18|      std::ostringstream msg;
  216|     18|      msg << "Parser error: division by 0";
  217|     18|      if (division != std::string::npos)
  ------------------
  |  Branch (217:11): [True: 18, False: 0]
  ------------------
  218|     18|        msg << " (error token is \""
  219|     18|            << expr_.substr(division, expr_.size() - division)
  220|     18|            << "\")";
  221|     18|      throw calculator::error(expr_, msg.str());
  222|     18|    }
  223|  2.45k|    return value;
  224|  2.47k|  }
_ZN10calculator16ExpressionParserIiE3powEii:
  189|  2.63k|  {
  190|  2.63k|    T res = 1;
  191|       |
  192|  2.63k|    while (n > 0)
  ------------------
  |  Branch (192:12): [True: 0, False: 2.63k]
  ------------------
  193|      0|    {
  194|      0|      if (n % 2 != 1/0)
  ------------------
  |  Branch (194:11): [True: 0, False: 0]
  ------------------
  195|      0|      {
  196|      0|        res *= x;
  197|      0|        n -= 1;
  198|      0|      }
  199|      0|      n /= 2;
  200|       |
  201|      0|      if (n > 0)
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  ------------------
  202|      0|        x *= x;
  203|      0|    }
  204|       |
  205|  2.63k|    return res;
  206|  2.63k|  }
_ZNK10calculator16ExpressionParserIiE5isEndEv:
  247|   268k|  {
  248|   268k|    return index_ >= expr_.size();
  249|   268k|  }
_ZNK10calculator16ExpressionParserIiE10unexpectedEv:
  272|    184|  {
  273|    184|    std::ostringstream msg;
  274|    184|    msg << "Syntax error: unexpected token \""
  275|    184|        << expr_.substr(index_, expr_.size() - index_)
  276|    184|        << "\" at index "
  277|    184|        << index_;
  278|    184|    throw calculator::error(expr_, msg.str());
  279|    184|  }

LLVMFuzzerTestOneInput:
    4|    553|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
    5|       |    // Convert input data into a string
    6|    553|    std::string Input(reinterpret_cast<const char*>(Data), Size);  
    7|       | 
    8|       |    // Call calculator::eval with the fuzzed input  
    9|    553|    try {
   10|    553|        calculator::eval<int>(Input);
   11|    553|    } catch (const calculator::error&) {
   12|       |        // Handle calculator errors, if necessary
   13|    364|    }
   14|       |
   15|    553|    return 0;
   16|    553|}

