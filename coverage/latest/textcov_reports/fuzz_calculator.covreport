_ZN10calculator4evalIiEET_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  438|  10.1k|{
  439|  10.1k|  ExpressionParser<T> parser;
  440|  10.1k|  return parser.eval(expression);
  441|  10.1k|}
_ZN10calculator16ExpressionParserIiE4evalERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  102|  10.1k|  {
  103|  10.1k|    T result = 0;
  104|  10.1k|    index_ = 0;
  105|  10.1k|    expr_ = expr;
  106|  10.1k|    try
  107|  10.1k|    {
  108|  10.1k|      result = parseExpr();
  109|  10.1k|      if (!isEnd())
  ------------------
  |  Branch (109:11): [True: 2.54k, False: 7.65k]
  ------------------
  110|  2.54k|        unexpected();
  111|  10.1k|    }
  112|  10.1k|    catch (const calculator::error&)
  113|  10.1k|    {
  114|  1.22M|      while(!stack_.empty())
  ------------------
  |  Branch (114:13): [True: 1.22M, False: 8.36k]
  ------------------
  115|  1.22M|        stack_.pop();
  116|  8.36k|      throw;
  117|  8.36k|    }
  118|  1.83k|    return result;
  119|  10.1k|  }
_ZN10calculator16ExpressionParserIiE9parseExprEv:
  403|  1.20M|  {
  404|  1.20M|    stack_.push(OperatorValue(Operator(OPERATOR_NULL, 0, 'L'), 0));
  405|       |    // first parse value on the left
  406|  1.20M|    T value = parseValue();
  407|       |
  408|  1.72M|    while (!stack_.empty())
  ------------------
  |  Branch (408:12): [True: 527k, False: 1.19M]
  ------------------
  409|   527k|    {
  410|       |      // parse an operator (+, -, *, ...)
  411|   527k|      Operator op(parseOp());
  412|  1.01M|      while (op.precedence  < stack_.top().getPrecedence() || (
  ------------------
  |  Branch (412:14): [True: 215k, False: 804k]
  ------------------
  413|   804k|             op.precedence == stack_.top().getPrecedence() &&
  ------------------
  |  Branch (413:14): [True: 357k, False: 446k]
  ------------------
  414|   804k|             op.associativity == 'L'))
  ------------------
  |  Branch (414:14): [True: 288k, False: 69.0k]
  ------------------
  415|   503k|      {
  416|       |        // end reached
  417|   503k|        if (stack_.top().isNull())
  ------------------
  |  Branch (417:13): [True: 10.9k, False: 492k]
  ------------------
  418|  10.9k|        {
  419|  10.9k|          stack_.pop();
  420|  10.9k|          return value;
  421|  10.9k|        }
  422|       |        // do the calculation ("reduce"), producing a new value
  423|   492k|        value = calculate(stack_.top().value, value, stack_.top().op);
  424|   492k|        stack_.pop();
  425|   492k|      }
  426|       |
  427|       |      // store on stack_ and continue parsing ("shift")
  428|   516k|      stack_.push(OperatorValue(op, value));
  429|       |      // parse value on the right
  430|   516k|      value = parseValue();
  431|   516k|    }
  432|  1.19M|    return 0;
  433|  1.20M|  }
_ZN10calculator16ExpressionParserIiE8OperatorC2Eiii:
  157|  1.73M|    { }
_ZN10calculator16ExpressionParserIiE13OperatorValueC2ERKNS1_8OperatorEi:
  167|  1.72M|    { }
_ZN10calculator16ExpressionParserIiE10parseValueEv:
  363|  2.42M|  {
  364|  2.42M|    T val = 0;
  365|  2.42M|    eatSpaces();
  366|  2.42M|    switch (getCharacter())
  367|  2.42M|    {
  368|   165k|      case '0': if (isHex())
  ------------------
  |  Branch (368:7): [True: 165k, False: 2.25M]
  |  Branch (368:21): [True: 29.4k, False: 136k]
  ------------------
  369|  29.4k|                  val = parseHex();
  370|   136k|                else
  371|   136k|                  val = parseDecimal();
  372|   165k|                break;
  373|   215k|      case '1': case '2': case '3': case '4': case '5':
  ------------------
  |  Branch (373:7): [True: 65.0k, False: 2.35M]
  |  Branch (373:17): [True: 70.6k, False: 2.35M]
  |  Branch (373:27): [True: 5.39k, False: 2.41M]
  |  Branch (373:37): [True: 30.9k, False: 2.39M]
  |  Branch (373:47): [True: 43.2k, False: 2.38M]
  ------------------
  374|   356k|      case '6': case '7': case '8': case '9':
  ------------------
  |  Branch (374:7): [True: 81.8k, False: 2.34M]
  |  Branch (374:17): [True: 20.1k, False: 2.40M]
  |  Branch (374:27): [True: 25.5k, False: 2.39M]
  |  Branch (374:37): [True: 13.8k, False: 2.40M]
  ------------------
  375|   356k|                val = parseDecimal();
  376|   356k|                break;
  377|  1.19M|      case '(': index_++;
  ------------------
  |  Branch (377:7): [True: 1.19M, False: 1.22M]
  ------------------
  378|  1.19M|                val = parseExpr();
  379|  1.19M|                eatSpaces();
  380|  1.19M|                if (getCharacter() != ')')
  ------------------
  |  Branch (380:21): [True: 1.66k, False: 1.19M]
  ------------------
  381|  1.66k|                {
  382|  1.66k|                  if (!isEnd())
  ------------------
  |  Branch (382:23): [True: 1.25k, False: 411]
  ------------------
  383|  1.25k|                    unexpected();
  384|  1.66k|                  throw calculator::error(expr_, "Syntax error: `)' expected at end of expression");
  385|  1.66k|                }
  386|  1.19M|                index_++; break;
  387|  14.9k|      case '~': index_++; val = ~parseValue(); break;
  ------------------
  |  Branch (387:7): [True: 14.9k, False: 2.40M]
  ------------------
  388|   217k|      case '+': index_++; val =  parseValue(); break;
  ------------------
  |  Branch (388:7): [True: 217k, False: 2.20M]
  ------------------
  389|   466k|      case '-': index_++; val =  parseValue() * static_cast<T>(-1);
  ------------------
  |  Branch (389:7): [True: 466k, False: 1.95M]
  ------------------
  390|   466k|                break;
  391|  3.65k|      default : if (!isEnd())
  ------------------
  |  Branch (391:7): [True: 3.65k, False: 2.41M]
  |  Branch (391:21): [True: 2.21k, False: 1.44k]
  ------------------
  392|  2.21k|                  unexpected();
  393|  3.65k|                throw calculator::error(expr_, "Syntax error: value expected at end of expression");
  394|  2.42M|    }
  395|  1.10M|    return val;
  396|  2.42M|  }
_ZN10calculator16ExpressionParserIiE9eatSpacesEv:
  285|  2.95M|  {
  286|  3.02M|    while (std::isspace(getCharacter()) != 0)
  ------------------
  |  Branch (286:12): [True: 63.0k, False: 2.95M]
  ------------------
  287|  63.0k|      index_++;
  288|  2.95M|  }
_ZNK10calculator16ExpressionParserIiE12getCharacterEv:
  255|  8.86M|  {
  256|  8.86M|    if (!isEnd())
  ------------------
  |  Branch (256:9): [True: 8.85M, False: 10.3k]
  ------------------
  257|  8.85M|      return expr_[index_];
  258|  10.3k|    return 0;
  259|  8.86M|  }
_ZNK10calculator16ExpressionParserIiE5isHexEv:
  348|   165k|  {
  349|   165k|    if (index_ + 2 < expr_.size())
  ------------------
  |  Branch (349:9): [True: 165k, False: 481]
  ------------------
  350|   165k|    {
  351|   165k|      char x = expr_[index_ + 1];
  352|   165k|      char h = expr_[index_ + 2];
  353|   165k|      return (std::tolower(x) == 'x' && toInteger(h) <= 0xf);
  ------------------
  |  Branch (353:15): [True: 29.5k, False: 135k]
  |  Branch (353:41): [True: 29.4k, False: 60]
  ------------------
  354|   165k|    }
  355|    481|    return false;
  356|   165k|  }
_ZN10calculator16ExpressionParserIiE9toIntegerEc:
  317|  2.88M|  {
  318|  2.88M|    if (c >= '0' && c <= '9') return c -'0';
  ------------------
  |  Branch (318:9): [True: 2.61M, False: 271k]
  |  Branch (318:21): [True: 2.31M, False: 306k]
  ------------------
  319|   577k|    if (c >= 'a' && c <= 'f') return c -'a' + 0xa;
  ------------------
  |  Branch (319:9): [True: 155k, False: 422k]
  |  Branch (319:21): [True: 89.1k, False: 66.4k]
  ------------------
  320|   488k|    if (c >= 'A' && c <= 'F') return c -'A' + 0xa;
  ------------------
  |  Branch (320:9): [True: 164k, False: 324k]
  |  Branch (320:21): [True: 79.6k, False: 84.9k]
  ------------------
  321|   409k|    T noDigit = 0xf + 1;
  322|   409k|    return noDigit;
  323|   488k|  }
_ZN10calculator16ExpressionParserIiE8parseHexEv:
  339|  29.4k|  {
  340|  29.4k|    index_ = index_ + 2;
  341|  29.4k|    T value = 0;
  342|   281k|    for (T h; (h = getInteger()) <= 0xf; index_++)
  ------------------
  |  Branch (342:15): [True: 251k, False: 29.4k]
  ------------------
  343|   251k|      value = value * 0x10 + h;
  344|  29.4k|    return value;
  345|  29.4k|  }
_ZNK10calculator16ExpressionParserIiE10getIntegerEv:
  326|  2.85M|  {
  327|  2.85M|    return toInteger(getCharacter());
  328|  2.85M|  }
_ZN10calculator16ExpressionParserIiE12parseDecimalEv:
  331|   492k|  {
  332|   492k|    T value = 0;
  333|  2.57M|    for (T d; (d = getInteger()) <= 9; index_++)
  ------------------
  |  Branch (333:15): [True: 2.08M, False: 492k]
  ------------------
  334|  2.08M|      value = value * 10 + d;
  335|   492k|    return value;
  336|   492k|  }
_ZN10calculator5errorC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_:
   82|  8.36k|  { }
_ZN10calculator16ExpressionParserIiE7parseOpEv:
  294|   527k|  {
  295|   527k|    eatSpaces();
  296|   527k|    switch (getCharacter())
  297|   527k|    {
  298|  66.0k|      case '|': index_++;     return Operator(OPERATOR_BITWISE_OR,      4, 'L');
  ------------------
  |  Branch (298:7): [True: 66.0k, False: 461k]
  ------------------
  299|  18.1k|      case '^': index_++;     return Operator(OPERATOR_BITWISE_XOR,     5, 'L');
  ------------------
  |  Branch (299:7): [True: 18.1k, False: 509k]
  ------------------
  300|  44.7k|      case '&': index_++;     return Operator(OPERATOR_BITWISE_AND,     6, 'L');
  ------------------
  |  Branch (300:7): [True: 44.7k, False: 482k]
  ------------------
  301|  19.9k|      case '<': expect("<<"); return Operator(OPERATOR_BITWISE_SHL,     9, 'L');
  ------------------
  |  Branch (301:7): [True: 19.9k, False: 507k]
  ------------------
  302|  32.4k|      case '>': expect(">>"); return Operator(OPERATOR_BITWISE_SHR,     9, 'L');
  ------------------
  |  Branch (302:7): [True: 32.4k, False: 494k]
  ------------------
  303|  52.3k|      case '+': index_++;     return Operator(OPERATOR_ADDITION,       10, 'L');
  ------------------
  |  Branch (303:7): [True: 52.3k, False: 474k]
  ------------------
  304|  48.9k|      case '-': index_++;     return Operator(OPERATOR_SUBTRACTION,    10, 'L');
  ------------------
  |  Branch (304:7): [True: 48.9k, False: 478k]
  ------------------
  305|  69.4k|      case '/': index_++;     return Operator(OPERATOR_DIVISION,       20, 'L');
  ------------------
  |  Branch (305:7): [True: 69.4k, False: 457k]
  ------------------
  306|  21.2k|      case '%': index_++;     return Operator(OPERATOR_MODULO,         20, 'L');
  ------------------
  |  Branch (306:7): [True: 21.2k, False: 505k]
  ------------------
  307|  29.4k|      case '*': index_++; if (getCharacter() != '*')
  ------------------
  |  Branch (307:7): [True: 29.4k, False: 497k]
  |  Branch (307:31): [True: 20.7k, False: 8.72k]
  ------------------
  308|  20.7k|                              return Operator(OPERATOR_MULTIPLICATION, 20, 'L');
  309|  8.72k|                index_++;     return Operator(OPERATOR_POWER,          30, 'R');
  310|  71.6k|      case 'e': index_++;     return Operator(OPERATOR_EXPONENT,       40, 'R');
  ------------------
  |  Branch (310:7): [True: 71.6k, False: 455k]
  ------------------
  311|  41.6k|      case 'E': index_++;     return Operator(OPERATOR_EXPONENT,       40, 'R');
  ------------------
  |  Branch (311:7): [True: 41.6k, False: 485k]
  ------------------
  312|  11.0k|      default :               return Operator(OPERATOR_NULL,            0, 'L');
  ------------------
  |  Branch (312:7): [True: 11.0k, False: 516k]
  ------------------
  313|   527k|    }
  314|   527k|  }
_ZN10calculator16ExpressionParserIiE6expectERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  265|  52.3k|  {
  266|  52.3k|    if (expr_.compare(index_, str.size(), str) != 0)
  ------------------
  |  Branch (266:9): [True: 265, False: 52.1k]
  ------------------
  267|    265|      unexpected();
  268|  52.3k|    index_ += str.size();
  269|  52.3k|  }
_ZNK10calculator16ExpressionParserIiE13OperatorValue13getPrecedenceEv:
  169|  1.82M|    {
  170|  1.82M|      return op.precedence;
  171|  1.82M|    }
_ZNK10calculator16ExpressionParserIiE13OperatorValue6isNullEv:
  173|   503k|    {
  174|   503k|      return op.op == OPERATOR_NULL;
  175|   503k|    }
_ZNK10calculator16ExpressionParserIiE9calculateEiiRKNS1_8OperatorE:
  227|   492k|  {
  228|   492k|    switch (op.op)
  229|   492k|    {
  230|  60.5k|      case OPERATOR_BITWISE_OR:     return v1 | v2;
  ------------------
  |  Branch (230:7): [True: 60.5k, False: 432k]
  ------------------
  231|  17.5k|      case OPERATOR_BITWISE_XOR:    return v1 ^ v2;
  ------------------
  |  Branch (231:7): [True: 17.5k, False: 475k]
  ------------------
  232|  43.0k|      case OPERATOR_BITWISE_AND:    return v1 & v2;
  ------------------
  |  Branch (232:7): [True: 43.0k, False: 449k]
  ------------------
  233|  19.5k|      case OPERATOR_BITWISE_SHL:    return v1 << v2;
  ------------------
  |  Branch (233:7): [True: 19.5k, False: 473k]
  ------------------
  234|  32.1k|      case OPERATOR_BITWISE_SHR:    return v1 >> v2;
  ------------------
  |  Branch (234:7): [True: 32.1k, False: 460k]
  ------------------
  235|  51.4k|      case OPERATOR_ADDITION:       return v1 + v2;
  ------------------
  |  Branch (235:7): [True: 51.4k, False: 441k]
  ------------------
  236|  47.6k|      case OPERATOR_SUBTRACTION:    return v1 - v2;
  ------------------
  |  Branch (236:7): [True: 47.6k, False: 444k]
  ------------------
  237|  19.8k|      case OPERATOR_MULTIPLICATION: return v1 * v2;
  ------------------
  |  Branch (237:7): [True: 19.8k, False: 472k]
  ------------------
  238|  68.7k|      case OPERATOR_DIVISION:       return v1 / checkZero(v2);
  ------------------
  |  Branch (238:7): [True: 68.7k, False: 423k]
  ------------------
  239|  19.4k|      case OPERATOR_MODULO:         return v1 % checkZero(v2);
  ------------------
  |  Branch (239:7): [True: 19.4k, False: 473k]
  ------------------
  240|  6.64k|      case OPERATOR_POWER:          return pow(v1, v2);
  ------------------
  |  Branch (240:7): [True: 6.64k, False: 485k]
  ------------------
  241|   105k|      case OPERATOR_EXPONENT:       return v1 * pow(10, v2);
  ------------------
  |  Branch (241:7): [True: 105k, False: 386k]
  ------------------
  242|      0|      default:                      return 0;
  ------------------
  |  Branch (242:7): [True: 0, False: 492k]
  ------------------
  243|   492k|    }
  244|   492k|  }
_ZNK10calculator16ExpressionParserIiE9checkZeroEi:
  210|  88.1k|  {
  211|  88.1k|    if (value == 0)
  ------------------
  |  Branch (211:9): [True: 241, False: 87.9k]
  ------------------
  212|    241|    {
  213|    241|      std::string divOperators("/%");
  214|    241|      std::size_t division = expr_.find_last_of(divOperators, index_ - 2);
  215|    241|      std::ostringstream msg;
  216|    241|      msg << "Parser error: division by 0";
  217|    241|      if (division != std::string::npos)
  ------------------
  |  Branch (217:11): [True: 241, False: 0]
  ------------------
  218|    241|        msg << " (error token is \""
  219|    241|            << expr_.substr(division, expr_.size() - division)
  220|    241|            << "\")";
  221|    241|      throw calculator::error(expr_, msg.str());
  222|    241|    }
  223|  87.9k|    return value;
  224|  88.1k|  }
_ZN10calculator16ExpressionParserIiE3powEii:
  189|   112k|  {
  190|   112k|    T res = 1;
  191|       |
  192|   112k|    while (n > 0)
  ------------------
  |  Branch (192:12): [True: 0, False: 112k]
  ------------------
  193|      0|    {
  194|      0|      if (n % 2 != 1/0)
  ------------------
  |  Branch (194:11): [True: 0, False: 0]
  ------------------
  195|      0|      {
  196|      0|        res *= x;
  197|      0|        n -= 1;
  198|      0|      }
  199|      0|      n /= 2;
  200|       |
  201|      0|      if (n > 0)
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  ------------------
  202|      0|        x *= x;
  203|      0|    }
  204|       |
  205|   112k|    return res;
  206|   112k|  }
_ZNK10calculator16ExpressionParserIiE5isEndEv:
  247|  8.87M|  {
  248|  8.87M|    return index_ >= expr_.size();
  249|  8.87M|  }
_ZNK10calculator16ExpressionParserIiE10unexpectedEv:
  272|  6.27k|  {
  273|  6.27k|    std::ostringstream msg;
  274|  6.27k|    msg << "Syntax error: unexpected token \""
  275|  6.27k|        << expr_.substr(index_, expr_.size() - index_)
  276|  6.27k|        << "\" at index "
  277|  6.27k|        << index_;
  278|  6.27k|    throw calculator::error(expr_, msg.str());
  279|  6.27k|  }

LLVMFuzzerTestOneInput:
    4|  10.1k|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
    5|       |    // Convert input data into a string
    6|  10.1k|    std::string Input(reinterpret_cast<const char*>(Data), Size);  
    7|       | 
    8|       |    // Call calculator::eval with the fuzzed input  
    9|  10.1k|    try {
   10|  10.1k|        calculator::eval<int>(Input);
   11|  10.1k|    } catch (const calculator::error&) {
   12|       |        // Handle calculator errors, if necessary
   13|  8.36k|    }
   14|       |
   15|  10.1k|    return 0;
   16|  10.1k|}

