_ZN10calculator4evalIiEET_RKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  438|     88|{
  439|     88|  ExpressionParser<T> parser;
  440|     88|  return parser.eval(expression);
  441|     88|}
_ZN10calculator16ExpressionParserIiE4evalERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE:
  102|     88|  {
  103|     88|    T result = 0;
  104|     88|    index_ = 0;
  105|     88|    expr_ = expr;
  106|     88|    try
  107|     88|    {
  108|     88|      result = parseExpr();
  109|     88|      if (!isEnd())
  ------------------
  |  Branch (109:11): [True: 34, False: 54]
  ------------------
  110|     34|        unexpected();
  111|     88|    }
  112|     88|    catch (const calculator::error&)
  113|     88|    {
  114|    147|      while(!stack_.empty())
  ------------------
  |  Branch (114:13): [True: 63, False: 84]
  ------------------
  115|     63|        stack_.pop();
  116|     84|      throw;
  117|     84|    }
  118|      4|    return result;
  119|     88|  }
_ZN10calculator16ExpressionParserIiE9parseExprEv:
  403|     99|  {
  404|     99|    stack_.push(OperatorValue(Operator(OPERATOR_NULL, 0, 'L'), 0));
  405|       |    // first parse value on the left
  406|     99|    T value = parseValue();
  407|       |
  408|    108|    while (!stack_.empty())
  ------------------
  |  Branch (408:12): [True: 49, False: 59]
  ------------------
  409|     49|    {
  410|       |      // parse an operator (+, -, *, ...)
  411|     49|      Operator op(parseOp());
  412|     54|      while (op.precedence  < stack_.top().getPrecedence() || (
  ------------------
  |  Branch (412:14): [True: 5, False: 49]
  ------------------
  413|     49|             op.precedence == stack_.top().getPrecedence() &&
  ------------------
  |  Branch (413:14): [True: 40, False: 9]
  ------------------
  414|     49|             op.associativity == 'L'))
  ------------------
  |  Branch (414:14): [True: 40, False: 0]
  ------------------
  415|     45|      {
  416|       |        // end reached
  417|     45|        if (stack_.top().isNull())
  ------------------
  |  Branch (417:13): [True: 40, False: 5]
  ------------------
  418|     40|        {
  419|     40|          stack_.pop();
  420|     40|          return value;
  421|     40|        }
  422|       |        // do the calculation ("reduce"), producing a new value
  423|      5|        value = calculate(stack_.top().value, value, stack_.top().op);
  424|      5|        stack_.pop();
  425|      5|      }
  426|       |
  427|       |      // store on stack_ and continue parsing ("shift")
  428|      9|      stack_.push(OperatorValue(op, value));
  429|       |      // parse value on the right
  430|      9|      value = parseValue();
  431|      9|    }
  432|     59|    return 0;
  433|     99|  }
_ZN10calculator16ExpressionParserIiE8OperatorC2Eiii:
  157|    148|    { }
_ZN10calculator16ExpressionParserIiE13OperatorValueC2ERKNS1_8OperatorEi:
  167|    108|    { }
_ZN10calculator16ExpressionParserIiE10parseValueEv:
  363|    130|  {
  364|    130|    T val = 0;
  365|    130|    eatSpaces();
  366|    130|    switch (getCharacter())
  367|    130|    {
  368|      3|      case '0': if (isHex())
  ------------------
  |  Branch (368:7): [True: 3, False: 127]
  |  Branch (368:21): [True: 0, False: 3]
  ------------------
  369|      0|                  val = parseHex();
  370|      3|                else
  371|      3|                  val = parseDecimal();
  372|      3|                break;
  373|     45|      case '1': case '2': case '3': case '4': case '5':
  ------------------
  |  Branch (373:7): [True: 4, False: 126]
  |  Branch (373:17): [True: 9, False: 121]
  |  Branch (373:27): [True: 4, False: 126]
  |  Branch (373:37): [True: 0, False: 130]
  |  Branch (373:47): [True: 28, False: 102]
  ------------------
  374|     46|      case '6': case '7': case '8': case '9':
  ------------------
  |  Branch (374:7): [True: 0, False: 130]
  |  Branch (374:17): [True: 1, False: 129]
  |  Branch (374:27): [True: 0, False: 130]
  |  Branch (374:37): [True: 0, False: 130]
  ------------------
  375|     46|                val = parseDecimal();
  376|     46|                break;
  377|     11|      case '(': index_++;
  ------------------
  |  Branch (377:7): [True: 11, False: 119]
  ------------------
  378|     11|                val = parseExpr();
  379|     11|                eatSpaces();
  380|     11|                if (getCharacter() != ')')
  ------------------
  |  Branch (380:21): [True: 2, False: 9]
  ------------------
  381|      2|                {
  382|      2|                  if (!isEnd())
  ------------------
  |  Branch (382:23): [True: 2, False: 0]
  ------------------
  383|      2|                    unexpected();
  384|      2|                  throw calculator::error(expr_, "Syntax error: `)' expected at end of expression");
  385|      2|                }
  386|      9|                index_++; break;
  387|     12|      case '~': index_++; val = ~parseValue(); break;
  ------------------
  |  Branch (387:7): [True: 12, False: 118]
  ------------------
  388|      1|      case '+': index_++; val =  parseValue(); break;
  ------------------
  |  Branch (388:7): [True: 1, False: 129]
  ------------------
  389|      9|      case '-': index_++; val =  parseValue() * static_cast<T>(-1);
  ------------------
  |  Branch (389:7): [True: 9, False: 121]
  ------------------
  390|      9|                break;
  391|     48|      default : if (!isEnd())
  ------------------
  |  Branch (391:7): [True: 48, False: 82]
  |  Branch (391:21): [True: 42, False: 6]
  ------------------
  392|     42|                  unexpected();
  393|     48|                throw calculator::error(expr_, "Syntax error: value expected at end of expression");
  394|    130|    }
  395|     51|    return val;
  396|    130|  }
_ZN10calculator16ExpressionParserIiE9eatSpacesEv:
  285|    181|  {
  286|    202|    while (std::isspace(getCharacter()) != 0)
  ------------------
  |  Branch (286:12): [True: 21, False: 181]
  ------------------
  287|     21|      index_++;
  288|    181|  }
_ZNK10calculator16ExpressionParserIiE12getCharacterEv:
  255|  1.07k|  {
  256|  1.07k|    if (!isEnd())
  ------------------
  |  Branch (256:9): [True: 1.04k, False: 24]
  ------------------
  257|  1.04k|      return expr_[index_];
  258|     24|    return 0;
  259|  1.07k|  }
_ZNK10calculator16ExpressionParserIiE5isHexEv:
  348|      3|  {
  349|      3|    if (index_ + 2 < expr_.size())
  ------------------
  |  Branch (349:9): [True: 2, False: 1]
  ------------------
  350|      2|    {
  351|      2|      char x = expr_[index_ + 1];
  352|      2|      char h = expr_[index_ + 2];
  353|      2|      return (std::tolower(x) == 'x' && toInteger(h) <= 0xf);
  ------------------
  |  Branch (353:15): [True: 0, False: 2]
  |  Branch (353:41): [True: 0, False: 0]
  ------------------
  354|      2|    }
  355|      1|    return false;
  356|      3|  }
_ZN10calculator16ExpressionParserIiE9toIntegerEc:
  317|    689|  {
  318|    689|    if (c >= '0' && c <= '9') return c -'0';
  ------------------
  |  Branch (318:9): [True: 648, False: 41]
  |  Branch (318:21): [True: 640, False: 8]
  ------------------
  319|     49|    if (c >= 'a' && c <= 'f') return c -'a' + 0xa;
  ------------------
  |  Branch (319:9): [True: 7, False: 42]
  |  Branch (319:21): [True: 1, False: 6]
  ------------------
  320|     48|    if (c >= 'A' && c <= 'F') return c -'A' + 0xa;
  ------------------
  |  Branch (320:9): [True: 6, False: 42]
  |  Branch (320:21): [True: 0, False: 6]
  ------------------
  321|     48|    T noDigit = 0xf + 1;
  322|     48|    return noDigit;
  323|     48|  }
_ZNK10calculator16ExpressionParserIiE10getIntegerEv:
  326|    689|  {
  327|    689|    return toInteger(getCharacter());
  328|    689|  }
_ZN10calculator16ExpressionParserIiE12parseDecimalEv:
  331|     49|  {
  332|     49|    T value = 0;
  333|    689|    for (T d; (d = getInteger()) <= 9; index_++)
  ------------------
  |  Branch (333:15): [True: 640, False: 49]
  ------------------
  334|    640|      value = value * 10 + d;
  335|     49|    return value;
  336|     49|  }
_ZN10calculator5errorC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_:
   82|     84|  { }
_ZN10calculator16ExpressionParserIiE7parseOpEv:
  294|     49|  {
  295|     49|    eatSpaces();
  296|     49|    switch (getCharacter())
  297|     49|    {
  298|      2|      case '|': index_++;     return Operator(OPERATOR_BITWISE_OR,      4, 'L');
  ------------------
  |  Branch (298:7): [True: 2, False: 47]
  ------------------
  299|      0|      case '^': index_++;     return Operator(OPERATOR_BITWISE_XOR,     5, 'L');
  ------------------
  |  Branch (299:7): [True: 0, False: 49]
  ------------------
  300|      1|      case '&': index_++;     return Operator(OPERATOR_BITWISE_AND,     6, 'L');
  ------------------
  |  Branch (300:7): [True: 1, False: 48]
  ------------------
  301|      0|      case '<': expect("<<"); return Operator(OPERATOR_BITWISE_SHL,     9, 'L');
  ------------------
  |  Branch (301:7): [True: 0, False: 49]
  ------------------
  302|      0|      case '>': expect(">>"); return Operator(OPERATOR_BITWISE_SHR,     9, 'L');
  ------------------
  |  Branch (302:7): [True: 0, False: 49]
  ------------------
  303|      0|      case '+': index_++;     return Operator(OPERATOR_ADDITION,       10, 'L');
  ------------------
  |  Branch (303:7): [True: 0, False: 49]
  ------------------
  304|      2|      case '-': index_++;     return Operator(OPERATOR_SUBTRACTION,    10, 'L');
  ------------------
  |  Branch (304:7): [True: 2, False: 47]
  ------------------
  305|      0|      case '/': index_++;     return Operator(OPERATOR_DIVISION,       20, 'L');
  ------------------
  |  Branch (305:7): [True: 0, False: 49]
  ------------------
  306|      3|      case '%': index_++;     return Operator(OPERATOR_MODULO,         20, 'L');
  ------------------
  |  Branch (306:7): [True: 3, False: 46]
  ------------------
  307|      1|      case '*': index_++; if (getCharacter() != '*')
  ------------------
  |  Branch (307:7): [True: 1, False: 48]
  |  Branch (307:31): [True: 1, False: 0]
  ------------------
  308|      1|                              return Operator(OPERATOR_MULTIPLICATION, 20, 'L');
  309|      0|                index_++;     return Operator(OPERATOR_POWER,          30, 'R');
  310|      0|      case 'e': index_++;     return Operator(OPERATOR_EXPONENT,       40, 'R');
  ------------------
  |  Branch (310:7): [True: 0, False: 49]
  ------------------
  311|      0|      case 'E': index_++;     return Operator(OPERATOR_EXPONENT,       40, 'R');
  ------------------
  |  Branch (311:7): [True: 0, False: 49]
  ------------------
  312|     40|      default :               return Operator(OPERATOR_NULL,            0, 'L');
  ------------------
  |  Branch (312:7): [True: 40, False: 9]
  ------------------
  313|     49|    }
  314|     49|  }
_ZNK10calculator16ExpressionParserIiE13OperatorValue13getPrecedenceEv:
  169|    103|    {
  170|    103|      return op.precedence;
  171|    103|    }
_ZNK10calculator16ExpressionParserIiE13OperatorValue6isNullEv:
  173|     45|    {
  174|     45|      return op.op == OPERATOR_NULL;
  175|     45|    }
_ZNK10calculator16ExpressionParserIiE9calculateEiiRKNS1_8OperatorE:
  227|      5|  {
  228|      5|    switch (op.op)
  229|      5|    {
  230|      1|      case OPERATOR_BITWISE_OR:     return v1 | v2;
  ------------------
  |  Branch (230:7): [True: 1, False: 4]
  ------------------
  231|      0|      case OPERATOR_BITWISE_XOR:    return v1 ^ v2;
  ------------------
  |  Branch (231:7): [True: 0, False: 5]
  ------------------
  232|      0|      case OPERATOR_BITWISE_AND:    return v1 & v2;
  ------------------
  |  Branch (232:7): [True: 0, False: 5]
  ------------------
  233|      0|      case OPERATOR_BITWISE_SHL:    return v1 << v2;
  ------------------
  |  Branch (233:7): [True: 0, False: 5]
  ------------------
  234|      0|      case OPERATOR_BITWISE_SHR:    return v1 >> v2;
  ------------------
  |  Branch (234:7): [True: 0, False: 5]
  ------------------
  235|      0|      case OPERATOR_ADDITION:       return v1 + v2;
  ------------------
  |  Branch (235:7): [True: 0, False: 5]
  ------------------
  236|      1|      case OPERATOR_SUBTRACTION:    return v1 - v2;
  ------------------
  |  Branch (236:7): [True: 1, False: 4]
  ------------------
  237|      0|      case OPERATOR_MULTIPLICATION: return v1 * v2;
  ------------------
  |  Branch (237:7): [True: 0, False: 5]
  ------------------
  238|      0|      case OPERATOR_DIVISION:       return v1 / checkZero(v2);
  ------------------
  |  Branch (238:7): [True: 0, False: 5]
  ------------------
  239|      3|      case OPERATOR_MODULO:         return v1 % checkZero(v2);
  ------------------
  |  Branch (239:7): [True: 3, False: 2]
  ------------------
  240|      0|      case OPERATOR_POWER:          return pow(v1, v2);
  ------------------
  |  Branch (240:7): [True: 0, False: 5]
  ------------------
  241|      0|      case OPERATOR_EXPONENT:       return v1 * pow(10, v2);
  ------------------
  |  Branch (241:7): [True: 0, False: 5]
  ------------------
  242|      0|      default:                      return 0;
  ------------------
  |  Branch (242:7): [True: 0, False: 5]
  ------------------
  243|      5|    }
  244|      5|  }
_ZNK10calculator16ExpressionParserIiE9checkZeroEi:
  210|      3|  {
  211|      3|    if (value == 0)
  ------------------
  |  Branch (211:9): [True: 0, False: 3]
  ------------------
  212|      0|    {
  213|      0|      std::string divOperators("/%");
  214|      0|      std::size_t division = expr_.find_last_of(divOperators, index_ - 2);
  215|      0|      std::ostringstream msg;
  216|      0|      msg << "Parser error: division by 0";
  217|      0|      if (division != std::string::npos)
  ------------------
  |  Branch (217:11): [True: 0, False: 0]
  ------------------
  218|      0|        msg << " (error token is \""
  219|      0|            << expr_.substr(division, expr_.size() - division)
  220|      0|            << "\")";
  221|      0|      throw calculator::error(expr_, msg.str());
  222|      0|    }
  223|      3|    return value;
  224|      3|  }
_ZNK10calculator16ExpressionParserIiE5isEndEv:
  247|  1.16k|  {
  248|  1.16k|    return index_ >= expr_.size();
  249|  1.16k|  }
_ZNK10calculator16ExpressionParserIiE10unexpectedEv:
  272|     78|  {
  273|     78|    std::ostringstream msg;
  274|     78|    msg << "Syntax error: unexpected token \""
  275|     78|        << expr_.substr(index_, expr_.size() - index_)
  276|     78|        << "\" at index "
  277|     78|        << index_;
  278|     78|    throw calculator::error(expr_, msg.str());
  279|     78|  }

LLVMFuzzerTestOneInput:
    3|     84|extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
    4|       |    // Convert input data into a string
    5|     84|    std::string Input(reinterpret_cast<const char*>(Data), Size);
    6|       |
    7|       |    // Call calculator::eval with the fuzzed input
    8|     84|    try { 
    9|     84|        calculator::eval<int>(Input);
   10|       |
   11|       |        // Introduce mutations to explore more paths
   12|     88|        for (size_t i = 0; i < Size; ++i) {
  ------------------
  |  Branch (12:28): [True: 4, False: 84]
  ------------------
   13|       |            // Example mutation strategy: Flip each bit in the input data
   14|      4|            uint8_t mutatedData = Data[i] ^ 0xFF;
   15|      4|            std::string MutatedInput(reinterpret_cast<const char*>(&mutatedData), Size);
   16|      4|            calculator::eval<int>(MutatedInput);
   17|      4|        }
   18|       |
   19|       |        // Generate targeted inputs for specific operations or edge cases
   20|     84|        if (Size > 0) {
  ------------------
  |  Branch (20:13): [True: 0, False: 84]
  ------------------
   21|       |            // Example: Add inputs that focus on division operations
   22|      0|            std::string DivisionInput = "10 / " + Input.substr(1);  // Avoid starting with zero
   23|      0|            calculator::eval<int>(DivisionInput);
   24|       |
   25|       |            // Example: Test with an input that might cause a specific error
   26|      0|            std::string ErrorInput = "invalid input";
   27|      0|            calculator::eval<int>(ErrorInput);
   28|      0|        }
   29|       |
   30|     84|    } catch (const calculator::error&) {
   31|       |        // Handle calculator errors, if necessary
   32|       |        // For example, log the error or ignore it based on the application's error handling strategy
   33|     84|    }
   34|       |
   35|     84|    return 0;
   36|     84|}

